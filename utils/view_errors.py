#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
current_dir = os.path.dirname(os.path.abspath(__file__))  # utils/
project_root = os.path.dirname(current_dir)  # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, project_root)

from src.db_manager import Database
from locales import t, load_locale_from_config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
load_locale_from_config()


def view_errors():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"""
    db = Database()
    
    errors = db.get_unresolved_errors()
    
    if not errors:
        print("‚úÖ –ù–µ—Ç –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!")
        return
    
    print(f"\n{'=' * 80}")
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(errors)} –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
    print('=' * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
    error_types = {}
    for err in errors:
        if err['error_type'] not in error_types:
            error_types[err['error_type']] = []
        error_types[err['error_type']].append(err)
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    for error_type, errs in error_types.items():
        print(f"\n{'‚îÄ' * 80}")
        print(f"–¢–∏–ø: {error_type} ({len(errs)} –æ—à–∏–±–æ–∫)")
        print('‚îÄ' * 80)
        
        for err in errs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            occurred = datetime.fromisoformat(err['occurred_at'])
            print(f"\nID: {err['id']}")
            print(f"–ö–∞–Ω–∞–ª: {err['channel_name']}")
            print(f"–ö–æ–≥–¥–∞: {occurred.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = err['error_message']
            if len(msg) > 100:
                msg = msg[:100] + "..."
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
        
        if len(errs) > 10:
            print(f"\n... –∏ –µ—â—ë {len(errs) - 10} –æ—à–∏–±–æ–∫ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞")
    
    print(f"\n{'=' * 80}")


def view_errors_by_channel():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    db = Database()
    
    channels = db.get_all_personal_channels()
    
    print(f"\n{'=' * 80}")
    print("–û—à–∏–±–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º")
    print('=' * 80)
    
    total_errors = 0
    
    for channel in channels:
        errors = db.get_unresolved_errors(channel['id'])
        
        if errors:
            print(f"\nüì∫ {channel['name']}: {len(errors)} –æ—à–∏–±–æ–∫")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
            error_types = {}
            for err in errors:
                error_types[err['error_type']] = error_types.get(err['error_type'], 0) + 1
            
            for error_type, count in error_types.items():
                print(f"   - {error_type}: {count}")
            
            total_errors += len(errors)
    
    if total_errors == 0:
        print("\n‚úÖ –ù–µ—Ç –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫!")
    else:
        print(f"\n{'=' * 80}")
        print(f"–í—Å–µ–≥–æ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫: {total_errors}")
        print('=' * 80)


def explain_errors():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"""
    print(f"\n{'=' * 80}")
    print("–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ")
    print('=' * 80)
    
    explanations = {
        'PLAYLIST_NOT_FOUND': 
            '–ö–∞–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ.\n'
            '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
            '  - Topic-–∫–∞–Ω–∞–ª (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª YouTube Music)\n'
            '  - –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n'
            '  - –£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –≤–∏–¥–µ–æ\n'
            '–†–µ—à–µ–Ω–∏–µ: –ú–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤',
        
        'DURATION_PARSE_ERROR':
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ.\n'
            '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
            '  - Livestream (–ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è)\n'
            '  - –ü—Ä–µ–º—å–µ—Ä–∞ (–µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å)\n'
            '  - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç YouTube API\n'
            '–†–µ—à–µ–Ω–∏–µ: –û–±—ã—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        
        'QUOTA_EXCEEDED':
            '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ YouTube API (10,000 units).\n'
            '–†–µ—à–µ–Ω–∏–µ: –ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–∫–≤–æ—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å PST)',
        
        'UNKNOWN':
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n'
            '–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É'
    }
    
    for error_type, explanation in explanations.items():
        print(f"\n{error_type}:")
        print(f"{explanation}")
    
    print(f"\n{'=' * 80}")


def main():
    print("=" * 80)
    print("YouTube Dashboard - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    print("=" * 80)
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º")
    print("3. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
    
    if choice == '1':
        view_errors()
    elif choice == '2':
        view_errors_by_channel()
    elif choice == '3':
        explain_errors()
    elif choice == '4':
        pass
    else:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)