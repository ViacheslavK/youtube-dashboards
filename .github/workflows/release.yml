name: Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  test:
    name: Run Tests Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        pytest --cov=src --cov-report=term -v

  # –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–æ–≤)
  create-release:
    name: Create GitHub Release
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥
        PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd youtube-dashboard
          pip install -r requirements.txt
          python src/setup_channels.py
          ```
          
          See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for full documentation.
        draft: false
        prerelease: false
        generate_release_notes: true

  # –°–±–æ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  build-artifacts:
    name: Build Artifacts
    needs: test
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: Windows
            artifact_name: youtube-dashboard-windows.zip
          - os: ubuntu-latest
            name: Linux
            artifact_name: youtube-dashboard-linux.tar.gz
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir youtube-dashboard
        xcopy /E /I src youtube-dashboard\src
        xcopy /E /I utils youtube-dashboard\utils
        xcopy /E /I migrations youtube-dashboard\migrations
        xcopy /E /I config youtube-dashboard\config
        copy requirements.txt youtube-dashboard\
        copy README.md youtube-dashboard\
        copy QUICKSTART.md youtube-dashboard\
        7z a ${{ matrix.artifact_name }} youtube-dashboard
    
    - name: Create package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir youtube-dashboard
        cp -r src utils migrations config youtube-dashboard/
        cp requirements.txt README.md QUICKSTART.md youtube-dashboard/
        tar -czf ${{ matrix.artifact_name }} youtube-dashboard
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.artifact_name }}
        retention-days: 30
    
    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.artifact_name }}

  # –î–µ–ø–ª–æ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  notify:
    name: Notify on Success
    needs: [test, create-release]
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Success notification
      run: |
        echo "‚úÖ Release ${{ steps.version.outputs.version }} created successfully!"
        echo "üéâ All tests passed and artifacts built."